generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "cockroachdb"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = "file:./mockingbird-dev.db"
}

// #region -- Next-Auth Tables

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Mockingbird specific references
  activity Activity[]
  actor    Actor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// #endregion

// #region Authentication and Authorization
model Passwords {
  userId   String @unique
  password String

  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// #region Mockingbird

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String // user that owns this image

  imageUrl     String // URL to the original version of the image
  thumbnailUrl String // URL to a small, thumbnail version of the image

  description String
  albumId     String?

  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)
}

model Album {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  name    String

  images Image[] // images in this album
}

// #endregion

// #regio ActivityPub
model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorId  String? // the User id for this Actor (if local)
  actorURI String // the URI for this Actor (could be remote)

  type       String // the Type of Activity
  objectType String // the Type of Object
  objectId   String // the ID of the Object (depends on the objectType)

  actor User? @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

// Actors point to either a local user, or represent a remote Actor
model Actor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? // the User id for this Actor, if local

  actorId           String
  preferredUsername String
  name              String
  summary           String
  icon              String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Followers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorURI    String // user who is being followed
  followerURI String // user that is following the actor
}

model Following {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorURI   String // user who is following
  follingURI String // user that is is being followed
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ActivityPub fields
  activityId String   @unique // ActivityPub ID URI
  content    String
  published  DateTime
  url        String
  isPublic   Boolean  @default(true)

  // Relationships
  attributedTo String // the ID of the Author that created the Note
  audiences    Audience[]
  attachments  Attachment[]
  noteTags     NoteTag[]

  @@index([published])
  @@index([activityId])
  @@index([attributedTo])
}

model Audience {
  id           String @id @default(cuid())
  noteId       String
  audienceType String // 'to', 'cc', 'bto', 'bcc'
  audienceUri  String

  // Relationships
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId, audienceType])
}

model Attachment {
  id        String  @id @default(cuid())
  noteId    String
  type      String // 'Image', 'Video', 'Audio', etc.
  mediaType String // MIME type
  url       String
  name      String?
  width     Int?
  height    Int?
  fileSize  BigInt?

  // Relationships
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model Tag {
  id   String @id @default(cuid())
  name String
  type String // 'Hashtag', 'Mention', 'Emoji', etc.

  // Relationships
  noteTags NoteTag[]

  @@unique([name, type])
}

model NoteTag {
  noteId String
  tagId  String
  href   String? // Optional link for the tag

  // Relationships
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@index([tagId])
}

// #endregion
