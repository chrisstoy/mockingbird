generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// #region -- Next-Auth Tables

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Mockingbird specific references
  posts   Post[]
  friends Friends[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// #endregion

// #region Authentication and Authorization
model Passwords {
  userId   String @unique
  password String

  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// #region Mockingbird
model Post {
  id               String  @id @default(cuid())
  posterId         String
  responseToPostId String?
  content          String
  likeCount        Int     @default(0)
  dislikeCount     Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  poster User @relation(fields: [posterId], references: [id], onDelete: Cascade)

  responseTo Post?  @relation("Responses", fields: [responseToPostId], references: [id])
  responses  Post[] @relation("Responses")
}

model Friends {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String // user who makes the friend request
  friendId String // user to be friends with
  accepted Boolean // true if the friendship is accepted

  user User @relation(fields: [userId], references: [id])
}

// #endregion
