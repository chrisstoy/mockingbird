generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./mockingbird-dev.db"
// }

// #region -- Next-Auth Tables

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Mockingbird specific references
  posts    Post[]
  friends  Friends[]
  activity Activity[]
  Actor    Actor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// #endregion

// #region Authentication and Authorization
model Passwords {
  userId   String @unique
  password String

  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// #region Mockingbird
model Post {
  id               String  @id @default(cuid())
  posterId         String
  responseToPostId String?
  content          String
  likeCount        Int     @default(0)
  dislikeCount     Int     @default(0)
  imageId          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  poster User @relation(fields: [posterId], references: [id], onDelete: Cascade)

  responseTo Post?  @relation("Responses", fields: [responseToPostId], references: [id], onDelete: Cascade)
  responses  Post[] @relation("Responses")

  image Image? @relation(fields: [imageId], references: [id], onDelete: SetNull)
}

model Friends {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String // user who makes the friend request
  friendId String // user to be friends with
  accepted Boolean // true if the friendship is accepted

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String // user that owns this image

  imageUrl     String // URL to the original version of the image
  thumbnailUrl String // URL to a small, thumbnail version of the image

  description String
  albumId     String?

  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)

  posts Post[] // posts that reference this image
}

model Album {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  name    String

  images Image[] // images in this album
}

// #endregion

// #regio ActivityPub
model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorId  String? // the User id for this Actor (if local)
  actorURI String // the URI for this Actor (could be remote)

  type       String // the Type of Activity
  objectType String // the Type of Object
  objectId   String // the ID of the Object (depends on the objectType)

  actor User? @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

// Actors point to either a local user, or represent a remote Actor
model Actor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? // the User id for this Actor, if local

  actorId           String
  preferredUsername String
  name              String
  summary           String
  icon              String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Followers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorURI    String // user who is being followed
  followerURI String // user that is following the actor
}

model Following {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorURI   String // user who is following
  follingURI String // user that is is being followed
}

model Note {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attributedToId String // actor that created the note
  content        String // the content of the note
  attachments    String // the attachments of the note
  tags           String // the tags of the note
}

model Attachment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
}

model Hashtag {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  href String
}

// #endregion
